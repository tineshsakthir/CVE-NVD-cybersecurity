import { format } from 'date-fns';
import { v4 as uuid } from 'uuid';
import fs from 'fs';
import { promises as fsPromises } from 'fs';
import path from 'path';


const logEvents = async (message, logName) => {
    const __dirname = import.meta.dirname ; 
    const dateTime = `${format(new Date(), 'yyyyMMdd\tHH:mm:ss')}`;
    const logItem = `${dateTime}\t${uuid()}\t${message}\n`;

    try {
        if (!fs.existsSync(path.join(__dirname, 'logs'))) {
            await fsPromises.mkdir(path.join(__dirname, 'logs'));
        }

        await fsPromises.appendFile(path.join(__dirname, 'logs', logName), logItem);
    } catch (err) {
        console.log("Error in logEvents.js") ; 
    }
}

const requestLogger = (req,res,next) => {
    try{
        const message = `${req.method}\t${req.headers.origin}\t${req.url}` ; 
        logEvents(message, 'reqLog.txt') ; 
        next() ; 
    }catch(err){
        console.log("Error in requestLogger function in logEvents.js") ; 
    }  
}


const createLogger = (message)=>{
    try{
        // const message = `` ;
        logEvents(message, 'createLog.txt')  ;
    }catch(err){
        console.log("Error in createLogger function in logEvents.js") ;
    }
}


const updateLogger = (message)=>{
    try{
        logEvents(message, 'updateLog.txt')  ;
    }catch(err){
        console.log("Error in updateLogger function in logEvents.js") ;
    }
}


const errorLogger = (message) => {
    try{
        logEvents(message, 'errorLog.txt')  ;
    }catch(err){
        console.log("Error in errorLogger function in logEvents.js") ;
    }
}

const syncProcessLogger = (message) => {
    try{
        logEvents(message, 'syncLog.txt')  ;
    }catch(err){
        console.log("Error in syncProcessLogger function in logEvents.js") ;
    }
}

export {requestLogger, createLogger, updateLogger, errorLogger, syncProcessLogger};