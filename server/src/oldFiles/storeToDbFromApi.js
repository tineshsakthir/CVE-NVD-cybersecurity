import express from "express";
import { CveListModel } from "../model/ListCve.js";
import axios from "axios";

const router = express.Router();

router.get("/", async (req, res) => {
  try {
    const count = await CveListModel.countDocuments({});
    if (count == 0) {
      const response = await axios.get(
        "https://services.nvd.nist.gov/rest/json/cves/2.0"
      );
      const totalCve = response.data.vulnerabilities; // Assuming vulnerabilities is an array

      for (const singleCve of totalCve) {
        const curId = singleCve.cve.id ;
        const sourceIdentifier = singleCve.cve.sourceIdentifier ;
        const published = singleCve.cve.published ;
        const lastModified = singleCve.cve.lastModified ;
        const vulnStatus = singleCve.cve.vulnStatus ;

        if(!curId || !sourceIdentifier || !published || !lastModified || !vulnStatus){
            continue ; 
        }

        const newCveList = new CveListModel({
          cveId: curId,
          sourceIdentifier: sourceIdentifier,
          published: published,
          lastModified: lastModified,
          vulnStatus : vulnStatus,
        });

        await newCveList.save() ; 

        //create first and save last to check whether the data is available to store in both the table
      }
    }

    res.send(`finished Storing!!!${count} ` ) ;
  } 
  catch (err) {
    res.json(err);
  }
});

export { router as storeToDbRouter };

/*
check whether our db is empty, if yes do the below, otherwise update it continuosly  in a periodic time 

create a start index, increment the startIndex continuossly all the data is reached
get that supply them to the cve and listCve for storing in the db
*/
