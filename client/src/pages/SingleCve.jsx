import React from "react";
import { useParams } from "react-router-dom";
import axios from "axios";
import config from "../configuration/config";

const SingleCve = () => {
  const [cveData, setCveData] = React.useState({
    _id: "",
    cveId: "",
    sourceIdentifier: "",
    published: "",
    lastModified: "",
    accessComplexity: "",
    accessVector: "",
    authentication: "",
    availabilityImpact: "",
    baseScore: "",
    baseSeverity: "",
    confidentialityImpact: "",
    cpeMatch: [
      { vulnerable: "", criteria: "", matchCriteriaId: "", _id: "" },
      { vulnerable: "", criteria: "", matchCriteriaId: "", _id: "" },
    ],
    descriptions: [
      { lang: "", value: "", _id: "" },
      { lang: "", value: "", _id: "" },
    ],
    exploitabilityScore: "",
    impactScore: "",
    integrityImpact: "",
    vectorString: "",
    vulnStatus: "",
    __v: 0,
  });

  const { cveId } = useParams();

  React.useEffect(() => {
    const fetchSingleCveData = async () => {
      try {
        const response = await axios.get(
          `http://localhost:${config.backendPort}/cve?cveId=${cveId}`
        );
        setCveData(response.data);
      } catch (err) {
        console.log(err);
      }
    };

    fetchSingleCveData();
  }, []);

  return (
    <div className="max-w-4xl mx-auto py-8">
      <h1 className="text-3xl font-bold mb-4">{cveData.cveId}</h1>
      <div className="mb-8">
        <h2 className="text-xl font-bold mb-2">Description:</h2>
        {cveData.descriptions.map((description, index) => (
          <p key={description._id + index}>
            {description.value} <span>({description.lang})</span>
          </p>
        ))}
      </div>
      <div className="mb-8">
        <h2 className="text-xl font-bold mb-2">CVSS V2 Metrics:</h2>
        <table className="w-full mb-4">
          <thead>
            <tr>
              <th className="border px-4 py-2">Access Vector</th>
              <th className="border px-4 py-2">Access Complexity</th>
              <th className="border px-4 py-2">Authentication</th>
              <th className="border px-4 py-2">Confidentiality Impact</th>
              <th className="border px-4 py-2">Integrity Impact</th>
              <th className="border px-4 py-2">Availability Impact</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td className="border px-4 py-2">{cveData.accessVector}</td>
              <td className="border px-4 py-2">{cveData.accessComplexity}</td>
              <td className="border px-4 py-2">{cveData.authentication}</td>
              <td className="border px-4 py-2">{cveData.confidentialityImpact}</td>
              <td className="border px-4 py-2">{cveData.integrityImpact}</td>
              <td className="border px-4 py-2">{cveData.availabilityImpact}</td>
            </tr>
          </tbody>
        </table>
      </div>
      <div className="mb-8">
        <h2 className="text-xl font-bold mb-2">Score:</h2>
        <div className="flex gap-9">
          <p>
            Exploitability Score: <span>{cveData.exploitabilityScore}</span>
          </p>
          <p>
            Impact Score: <span className="text-red-600">{cveData.impactScore}</span>
          </p>
        </div>
      </div>
      <div>
        <h2 className="text-xl font-bold mb-2">CPE:</h2>
        <table className="w-full mb-4">
          <thead>
            <tr>
              <th className="border px-4 py-2">Criteria</th>
              <th className="border px-4 py-2">Match Criteria ID</th>
              <th className="border px-4 py-2">Vulnerable</th>
            </tr>
          </thead>
          <tbody>
            {cveData.cpeMatch.map((cpem, index) => {
              console.log(
                cpem.criteria,
                "dfdfd",
                cpem.matchCriteriaId,
                "dfdfd",
                cpem.vulnerable,
                "dfdfd",
                index
              );
              // if (index === 0) return null; // Returning null for the first element to avoid rendering it
              return (
                <tr key={index}>
                  <td className="border px-4 py-2">{cpem.criteria}</td>
                  <td className="border px-4 py-2">{cpem.matchCriteriaId}</td>
                  <td className="border px-4 py-2">{cpem.vulnerable}</td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default SingleCve;
