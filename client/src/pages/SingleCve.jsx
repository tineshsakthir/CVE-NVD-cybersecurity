import React from "react";
import { useParams } from "react-router-dom";
import axios from "axios";
import config from "../configuration/config";

const SingleCve = () => {
  // here i can use the name only as cveId , because in the React router design , i have used the cveId as param name, so can't extract any other name from the useParams() hook

  const [cveData, setCveData] = React.useState({
    _id: "",
    cveId: "",
    sourceIdentifier: "",
    published: "",
    lastModified: "",
    accessComplexity: "",
    accessVector: "",
    authentication: "",
    availabilityImpact: "",
    baseScore: "",
    baseSeverity: "",
    confidentialityImpact: "",
    cpeMatch: [
      { vulnerable: "", criteria: "", matchCriteriaId: "", _id: "" },
      { vulnerable: "", criteria: "", matchCriteriaId: "", _id: "" },
    ],
    descriptions: [
      { lang: "", value: "", _id: "" },
      { lang: "", value: "", _id: "" },
    ],
    exploitabilityScore: "",
    impactScore: "",
    integrityImpact: "",
    vectorString: "",
    vulnStatus: "",
    __v: 0,
  });

  const { cveId } = useParams();

  React.useEffect(() => {
    const fetchSingleCveData = async () => {
      try {
        const response = await axios.get(
          `http://localhost:${config.backendPort}/cve?cveId=${cveId}`
        );
        setCveData(response.data);
        console.log(response.data);
      } catch (err) {
        console.log(err);
      }
    };

    fetchSingleCveData();
  }, []);

  return (
    <div>
      {cveId}
      <h1>{cveData.cveId}</h1>
      <h2>Description :</h2>
      {cveData.descriptions.map((description) => (
        <p key={description._id}>
          {description.value}{" "}
          <span key={description._id}>{description.lang}</span>
        </p>
      ))}
      <h2>CVSS V2 Metrics : </h2>
      <p>
        Severity : <span>{cveData.baseSeverity}</span> Score :{" "}
        <span>{cveData.baseScore}</span>
      </p>
      <table>
        <thead>
          <tr>
            <th>Access Vector</th>
            <th>Access Complexity</th>
            <th>Authentication</th>
            <th>Confidentiality Impact</th>
            <th>Integrity Impact</th>
            <th>Availability Impact</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>{cveData.accessVector}</td>
            <td>{cveData.accessComplexity}</td>
            <td>{cveData.authentication}</td>
            <td>{cveData.confidentialityImpact}</td>
            <td>{cveData.integrityImpact}</td>
            <td>{cveData.availabilityImpact}</td>
          </tr>
        </tbody>
      </table>

      <h2>Score : </h2>
      <p>
        Exploitability Score : <span>{cveData.exploitabilityScore}</span>
      </p>
      <p>
        Impact Score : <span>{cveData.impactScore}</span>
      </p>

      <h2>CPE : </h2>
      <table>
        <thead>
          <tr>
            <th>Criteria</th>
            <th>Match Criteria ID</th>
            <th>Vulnerable</th>
          </tr>
        </thead>
        <tbody>
          {cveData.cpeMatch.map((cpem) => (
            <tr key={cpem._id}>
              <td>{cpem.criteria}</td>
              <td>{cpem.matchCriteriaId}</td>
              <td>{cpem.vulnerable}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default SingleCve;
